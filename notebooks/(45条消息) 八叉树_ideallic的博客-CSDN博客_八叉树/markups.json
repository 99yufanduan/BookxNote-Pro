{"EpubVersion":2,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"date":"2022-04-09 12:11:46","docid":0,"fillcolor":"fffeeb73","id":1,"markups":[{"date":"2022-04-09 12:12:26","docid":0,"fillcolor":"fffeeb73","id":2,"markups":[{"date":"2022-04-09 12:12:34","docid":0,"fillcolor":"fffeeb73","id":24,"originaltext":"(1). 设定最大递归深度。","page":0,"textblocks":[{"first":[58.42340850830078,465.2737731933594,3.2028846740722656,13.538238525390625],"last":[152.46923828125,465.2737731933594,9.618270874023438,13.538238525390625],"length":14,"rects":[[58.42340850830078,465.2737731933594,103.66410064697266,13.538238525390625]],"start":643,"text":"(1). 设定最大递归深度。"}],"type":5,"uuid":"ef5b555e41284ff72085899b77fb452a"},{"date":"2022-04-09 12:12:38","docid":0,"fillcolor":"fffeeb73","id":25,"originaltext":"(2). 找出场景的最大尺寸，并以此尺寸建立第一个立方体。","page":0,"textblocks":[{"first":[58.42340850830078,490.8523254394531,3.2028846740722656,12.5],"last":[296.7432861328125,490.8523254394531,9.618255615234375,12.5],"length":29,"rects":[[58.42340850830078,490.8523254394531,247.9381332397461,12.5]],"start":659,"text":"(2). 找出场景的最大尺寸，并以此尺寸建立第一个立方体。"}],"type":5,"uuid":"46ba3d87c52952a5be9c19c40a9d534a"},{"date":"2022-04-09 12:14:02","docid":0,"fillcolor":"fffeeb73","id":26,"originaltext":"(3). 依序将单位元元素丢入能被包含且没有子节点的立方体。","page":0,"textblocks":[{"first":[58.42340850830078,516.1002807617188,3.2028846740722656,12.5],"last":[306.361572265625,516.1002807617188,9.618255615234375,12.5],"length":30,"rects":[[58.42340850830078,516.1002807617188,257.5564193725586,12.5]],"start":690,"text":"(3). 依序将单位元元素丢入能被包含且没有子节点的立方体。"}],"type":5,"uuid":"4581b5b9f095d1b84b213a8ae003dcb9"},{"date":"2022-04-09 12:14:06","docid":0,"fillcolor":"fffeeb73","id":27,"originaltext":"(4). 若没达到最大递归深度，就进行细分八等份，再将该立方体所装的单位元元素全部分担给八个子立方体。","page":0,"textblocks":[{"first":[58.42340850830078,541.0482788085938,3.2028846740722656,13.5],"last":[508.34521484375,541.0482788085938,9.6182861328125,13.5],"length":51,"rects":[[58.42340850830078,541.0482788085938,459.5400924682617,13.5]],"start":722,"text":"(4). 若没达到最大递归深度，就进行细分八等份，再将该立方体所装的单位元元素全部分担给八个子立方体。"}],"type":5,"uuid":"160669230b4f0c721c1509bc92d1781a"},{"date":"2022-04-09 12:15:12","docid":0,"fillcolor":"fffeeb73","id":28,"originaltext":"(5). 若发现子立方体所分配到的单位元元素数量不为零且跟父立方体是一样的，则该子立方体停止细分，因为跟据空间分割理论，细分的空间所得到的分配必定较少，若是一样数目，则再怎么切数目还是一样，会造成无穷切割的情形。","page":1,"textblocks":[{"first":[58.42340850830078,0.02055644989013672,3.2028846740722656,13.5],"last":[318.11669921875,15.95025634765625,9.618255615234375,12.5],"length":107,"rects":[[58.42340850830078,0.02055644989013672,699.9968795776367,13.5],[39.18687057495117,15.95025634765625,288.5480842590332,12.5]],"start":61,"text":"(5). 若发现子立方体所分配到的单位元元素数量不为零且跟父立方体是一样的，则该子立方体停止细分，因为跟据空间分割理论，细分的空间所得到的分配必定较少，\n若是一样数目，则再怎么切数目还是一样，会造成无穷切割的情形。"}],"type":5,"uuid":"23143bcc1f8a274d4aed971209229b49"},{"date":"2022-04-09 12:15:15","docid":0,"fillcolor":"fffeeb73","id":29,"originaltext":"(6). 重复3，直到达到最大递归深度。","page":1,"textblocks":[{"first":[58.42340850830078,40.89824295043945,3.2028846740722656,13.5],"last":[205.90982055664062,40.89824295043945,9.618270874023438,13.5],"length":20,"rects":[[58.42340850830078,40.89824295043945,157.10468292236328,13.5]],"start":170,"text":"(6). 重复3，直到达到最大递归深度。"}],"type":5,"uuid":"e8e0d7c76155f75487f8418ad3d96981"}],"originaltext":"实现八叉树的原理","page":0,"textblocks":[{"first":[39.18687057495117,441.3564147949219,9.618270874023438,12.5],"last":[106.51475524902344,441.3564147949219,9.618270874023438,12.5],"length":8,"rects":[[39.18687057495117,441.3564147949219,76.9461555480957,12.5]],"start":632,"text":"实现八叉树的原理"}],"type":5,"uuid":"c485568890c2718b2de87b5c0e5aaa53"},{"date":"2022-04-09 12:23:35","docid":0,"fillcolor":"fffeeb73","id":10,"markups":[{"date":"2022-04-09 12:23:38","docid":0,"fillcolor":"fffeeb73","id":30,"originaltext":"灰节点，它对应的立方体部分地为V所占据；","page":1,"textblocks":[{"first":[39.18687057495117,432.5416259765625,9.618270874023438,12.5],"last":[218.73104858398438,432.5416259765625,9.618270874023438,12.5],"length":20,"rects":[[39.18687057495117,432.5416259765625,189.16244888305664,12.5]],"start":713,"text":"灰节点，它对应的立方体部分地为V所占据；"}],"type":5,"uuid":"a1026142778e4139816c2e50511e653e"},{"date":"2022-04-09 12:23:41","docid":0,"fillcolor":"fffeeb73","id":31,"originaltext":"白节点，它所对应的立方体中无V的内容；","page":1,"textblocks":[{"first":[39.18687057495117,457.78955078125,9.618270874023438,12.5],"last":[209.11277770996094,457.78955078125,9.618270874023438,12.5],"length":19,"rects":[[39.18687057495117,457.78955078125,179.5441780090332,12.5]],"start":736,"text":"白节点，它所对应的立方体中无V的内容；"}],"type":5,"uuid":"43e5d86de2bd30fb0a1151cfde9b7b97"},{"date":"2022-04-09 12:23:44","docid":0,"fillcolor":"fffeeb73","id":32,"originaltext":"黑节点，它所对应的立方体全为V所占据。","page":1,"textblocks":[{"first":[39.18687057495117,483.0374755859375,9.618270874023438,12.5],"last":[209.11277770996094,483.0374755859375,9.618270874023438,12.5],"length":19,"rects":[[39.18687057495117,483.0374755859375,179.5441780090332,12.5]],"start":756,"text":"黑节点，它所对应的立方体全为V所占据。"}],"type":5,"uuid":"cd5fc4c545c8d456a7a6f0ac131e3dfe"}],"originaltext":"八叉树上的节点可分为三类：","page":1,"textblocks":[{"first":[96.896484375,406.99365234375,9.618270874023438,13.5],"last":[212.31573486328125,406.99365234375,9.618270874023438,13.5],"length":13,"rects":[[96.896484375,406.99365234375,125.03752136230469,13.5]],"start":699,"text":"八叉树上的节点可分为三类："}],"type":5,"uuid":"291463fc9580228bee4efa85c568a04a"},{"date":"2022-04-09 12:24:45","docid":0,"fillcolor":"fffeeb73","id":14,"markups":[{"date":"2022-04-09 12:24:51","docid":0,"fillcolor":"ffff0000","id":15,"originaltext":"八叉树有三种不同的存贮结构，分别是规则方式、线性方式以及一对八方式","page":2,"textblocks":[{"first":[39.18687057495117,97.70556640625,9.618270874023438,12.5],"last":[346.9715270996094,97.70556640625,9.618255615234375,12.5],"length":33,"rects":[[39.18687057495117,97.70556640625,317.4029121398926,12.5]],"start":311,"text":"八叉树有三种不同的存贮结构，分别是规则方式、线性方式以及一对八方式"}],"type":5,"uuid":"7debdc38f26c2b39baf6d31709cbde5f"},{"date":"2022-04-09 12:24:56","docid":0,"fillcolor":"fffeeb73","id":33,"markups":[{"date":"2022-04-09 12:27:29","docid":0,"fillcolor":"fffeeb73","id":34,"originaltext":"规则八叉树的存贮结构用一个有九个字段的记录来表示树中的每个结点。其中一个字段用来描述该结点的特性(在目前假定下，只要描述它是灰、白、黑三类结点中哪一类即可)，其余的八个字段用来作为存放指向其八个子结点的指针。这是最普遍使用的表示树形数据的存贮结构方式。","page":2,"textblocks":[{"first":[55.22045135498047,163.8311767578125,9.618270874023438,12.5],"last":[532.9215698242188,179.4608154296875,9.6182861328125,12.5],"length":127,"rects":[[55.22045135498047,163.8311767578125,695.718391418457,12.5],[39.18687057495117,179.4608154296875,503.3529853820801,12.5]],"start":439,"text":"规则八叉树的存贮结构用一个有九个字段的记录来表示树中的每个结点。其中一个字段用来描述该结点的特性(在目前假定下，只要描述它是灰、白、黑三类结点中哪\n一类即可)，其余的八个字段用来作为存放指向其八个子结点的指针。这是最普遍使用的表示树形数据的存贮结构方式。"}],"type":5,"uuid":"b91ed5916b256ca290fc410673f6e6ba"},{"date":"2022-04-09 12:27:38","docid":0,"fillcolor":"fffeeb73","id":35,"originaltext":"规则八叉树缺陷较多，最大的问题是指针占用了大量的空间。假定每个指针要用两个字节表示，而结点的描述用一个字节，那么存放指针要占总的存贮量的94％","page":2,"textblocks":[{"first":[55.22045135498047,204.7088623046875,9.618270874023438,12.5],"last":[719.9612426757812,204.7088623046875,9.6182861328125,12.5],"length":71,"rects":[[55.22045135498047,204.7088623046875,674.3590774536133,12.5]],"start":572,"text":"规则八叉树缺陷较多，最大的问题是指针占用了大量的空间。假定每个指针要用两个字节表示，而结点的描述用一个字节，那么存放指针要占总的存贮量的94％"}],"type":5,"uuid":"794cc733af0e16c1c7830ac8f20ff6d2"}],"originaltext":"1、规则八叉树","page":2,"textblocks":[{"first":[39.18687057495117,138.583251953125,5.347759246826172,12.5],"last":[92.62744140625,138.583251953125,9.618270874023438,12.5],"length":7,"rects":[[39.18687057495117,138.583251953125,63.058841705322266,12.5]],"start":426,"text":"1、规则八叉树"}],"type":5,"uuid":"7aeb9b6b829df6ed4cfeb203d346e4f7"},{"date":"2022-04-09 12:27:44","docid":0,"fillcolor":"fffeeb73","id":36,"markups":[{"date":"2022-04-09 13:21:43","docid":0,"fillcolor":"fffeeb73","id":37,"originaltext":"线性八叉树注重考虑如何提高空间利用率。用某一预先确定的次序遍历八叉树(例如以深度第一的方式)，将八叉树转换成一个线性表","page":2,"textblocks":[{"first":[55.22045135498047,270.83447265625,9.618270874023438,12.5],"last":[600.24951171875,270.83447265625,9.6182861328125,12.5],"length":59,"rects":[[55.22045135498047,270.83447265625,554.647346496582,12.5]],"start":695,"text":"线性八叉树注重考虑如何提高空间利用率。用某一预先确定的次序遍历八叉树(例如以深度第一的方式)，将八叉树转换成一个线性表"}],"type":5,"uuid":"f9f0b180dd013bb3d95b069a30549778"},{"date":"2022-04-09 13:22:00","docid":0,"fillcolor":"fffeeb73","id":38,"originaltext":"例如用适当的方式来说明它是否为叶结点，如果不是叶结点时还可用其八个子结点值的平均值作为非叶结点的值等等","page":2,"textblocks":[{"first":[231.55227661132812,286.464111328125,9.618270874023438,12.5],"last":[712.4657592773438,286.464111328125,9.6182861328125,12.5],"length":51,"rects":[[231.55227661132812,286.464111328125,490.5317687988281,12.5]],"start":793,"text":"例如用适当的方式来说明它是否为叶结点，如果不是叶结点时还可用其八个子结点值的平均值作为非叶结点的值等等"}],"type":5,"uuid":"072ce678d1649a6bd3bd877f0e325343"},{"date":"2022-04-09 13:22:09","docid":0,"fillcolor":"fffeeb73","id":39,"originaltext":"这样，可以在内存中以紧凑的方式来表示线性表，可以不用指针或者仅用一个指针表示即可","page":2,"textblocks":[{"first":[731.7023315429688,286.464111328125,9.6182861328125,12.5],"last":[404.6811218261719,302.09375,9.618255615234375,12.5],"length":41,"rects":[[731.7023315429688,286.464111328125,9.6182861328125,12.5],[39.18687057495117,302.09375,375.1125068664551,12.5]],"start":845,"text":"这\n样，可以在内存中以紧凑的方式来表示线性表，可以不用指针或者仅用一个指针表示即可"}],"type":5,"uuid":"1c5149f28c93ef5cbb1c83869ca110fb"}],"originaltext":"2、线性八叉树","page":2,"textblocks":[{"first":[39.18687057495117,245.58642578125,5.347759246826172,12.5],"last":[92.62744140625,245.58642578125,9.618270874023438,12.5],"length":7,"rects":[[39.18687057495117,245.58642578125,63.058841705322266,12.5]],"start":682,"text":"2、线性八叉树"}],"type":5,"uuid":"c9a0c5f31f60fb1dab30cdffd0d3158c"},{"date":"2022-04-09 13:22:34","docid":0,"fillcolor":"fffeeb73","id":40,"markups":[{"date":"2022-04-09 13:32:16","docid":0,"fillcolor":"fffeeb73","id":41,"originaltext":"也就是说，即使某个记录是不必要的(例如，该结点已是叶结点)，那么相应的存贮位置也必须空闲在那里（图2-5-3）","page":2,"textblocks":[{"first":[683.6109619140625,520.308349609375,9.6182861328125,12.5],"last":[452.7771911621094,535.93798828125,9.618255615234375,12.5],"length":56,"rects":[[683.6109619140625,520.308349609375,67.327880859375,12.5],[39.18687057495117,535.93798828125,423.2085762023926,12.5]],"start":1050,"text":"也就是说，即使\n某个记录是不必要的(例如，该结点已是叶结点)，那么相应的存贮位置也必须空闲在那里（图2-5-3）"}],"type":5,"uuid":"6e929e8787cfff43ccc3edd4ebded241"}],"originaltext":"3、一对八式的八叉树","page":2,"textblocks":[{"first":[39.18687057495117,479.4306640625,5.347759246826172,12.5],"last":[121.48225402832031,479.4306640625,9.618270874023438,12.5],"length":10,"rects":[[39.18687057495117,479.4306640625,91.91365432739258,12.5]],"start":890,"text":"3、一对八式的八叉树"}],"type":5,"uuid":"8bf107f46feb0414be1cacd56f310a13"}],"originaltext":"（二）八叉树的存贮结构","page":2,"textblocks":[{"first":[39.18687057495117,72.4576416015625,9.618270874023438,12.5],"last":[135.36956787109375,72.4576416015625,9.618270874023438,12.5],"length":11,"rects":[[39.18687057495117,72.4576416015625,105.80096817016602,12.5]],"start":294,"text":"（二）八叉树的存贮结构"}],"type":5,"uuid":"d2a33a9cbc3cfc38e73ad55faacd7faa"}],"originaltext":"八叉树","page":0,"textblocks":[{"first":[377.263427734375,125.56605529785156,14.427398681640625,16.5],"last":[406.11822509765625,125.56605529785156,14.427398681640625,16.5],"length":3,"rects":[[377.263427734375,125.56605529785156,43.282196044921875,16.5]],"start":97,"text":"八叉树"}],"type":5,"uuid":"cb34ce10ed6cb7b680fc5de0b0fe0222"}],"maxid":41,"notelinks":[],"title":"(45条消息) 八叉树_ideallic的博客-CSDN博客_八叉树","unimportant":[]}