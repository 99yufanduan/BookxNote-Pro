{"EpubVersion":2,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"date":"2023-04-26 19:38:56","docid":0,"fillcolor":"fffeeb73","id":1,"originaltext":"C++异常处理（try catch throw）完全攻略","page":0,"textblocks":[{"first":[36.503482818603516,142.21170043945312,13.051563262939453,24.5],"last":[397.4211730957031,142.21170043945312,19.509063720703125,24.5],"length":28,"rects":[[36.503482818603516,142.21170043945312,380.42675399780273,24.5]],"start":38,"text":"C++异常处理（try catch throw）完全攻略"}],"type":5,"uuid":"63e27fae209bafdc7e84c2b157131931"},{"date":"2023-04-26 19:39:00","docid":0,"fillcolor":"fffeeb73","id":2,"originaltext":"C++异常处理基本语法","page":0,"textblocks":[{"first":[36.503482818603516,729.8836059570312,12.119632720947266,21.5],"last":[201.58018493652344,729.8836059570312,18.00836181640625,21.5],"length":11,"rects":[[36.503482818603516,729.8836059570312,183.08506393432617,21.5]],"start":816,"text":"C++异常处理基本语法"}],"type":5,"uuid":"f1f040575a2a8473bb241e1e6600978b"},{"date":"2023-04-26 19:39:15","docid":0,"fillcolor":"fffeeb73","id":4,"originaltext":"try...catch 语句的执行过程是：","page":1,"textblocks":[{"first":[36.503482818603516,423.9896240234375,4.478080749511719,16.5],"last":[190.324951171875,423.9896240234375,12.005584716796875,16.5],"length":21,"rects":[[36.503482818603516,423.9896240234375,165.82705307006836,16.5]],"start":226,"text":"try...catch 语句的执行过程是："}],"type":5,"uuid":"b38daf4d9902007f2960c60738d36d88"},{"date":"2023-04-26 19:39:22","docid":0,"fillcolor":"fffeeb73","id":5,"originaltext":"执行 try 块中的语句，如果执行的过程中没有异常拋出，那么执行完后就执行最后一个 catch 块后面的语句，所有 catch 块中的语句都不会被执行；","page":1,"textblocks":[{"first":[51.51045608520508,443.4483337402344,12.005577087402344,14.5],"last":[317.88421630859375,462.9573974609375,12.005584716796875,15.5],"length":77,"rects":[[51.51045608520508,443.4483337402344,504.9846000671387,14.5],[51.51045608520508,462.9573974609375,278.37934494018555,15.5]],"start":248,"text":"执行 try 块中的语句，如果执行的过程中没有异常拋出，那么执行完后就执行最后一个 catch 块\n后面的语句，所有 catch 块中的语句都不会被执行；"}],"type":5,"uuid":"7230d818b04013e1de915b331ea5e47e"},{"date":"2023-04-26 19:39:27","docid":0,"fillcolor":"fffeeb73","id":6,"originaltext":"如果 try 块执行的过程中拋出了异常，那么拋出异常后立即跳转到第一个“异常类型”和拋出的异常类型匹配的 catch 块中执行（称作异常被该 catch 块“捕获”），执行完后再跳转到最后一个 catch 块后面继续执行。","page":1,"textblocks":[{"first":[51.51045608520508,481.71612548828125,12.005577087402344,14.5],"last":[197.8284454345703,520.7342529296875,12.005584716796875,14.5],"length":113,"rects":[[51.51045608520508,481.71612548828125,502.7335624694824,14.5],[51.51045608520508,501.2252197265625,496.7307548522949,15.5],[51.51045608520508,520.7342529296875,158.3235740661621,14.5]],"start":326,"text":"如果 try 块执行的过程中拋出了异常，那么拋出异常后立即跳转到第一个“异常类型”和拋出的\n异常类型匹配的 catch 块中执行（称作异常被该 catch 块“捕获”），执行完后再跳转到最后\n一个 catch 块后面继续执行。"}],"type":5,"uuid":"640bba66b75f2a701f0c9c29310dbbfa"},{"date":"2023-04-26 19:39:35","docid":0,"fillcolor":"fffeeb73","id":7,"originaltext":"能够捕获任何异常的 catch 语句","page":2,"textblocks":[{"first":[36.503482818603516,676.6089477539062,18.008365631103516,21.5],"last":[275.1143493652344,676.6089477539062,18.00836181640625,21.5],"length":18,"rects":[[36.503482818603516,676.6089477539062,256.6192283630371,21.5]],"start":467,"text":"能够捕获任何异常的 catch 语句"}],"type":5,"uuid":"1352924e341d7a88172450747aebaf61"},{"date":"2023-04-26 19:39:36","docid":0,"fillcolor":"fffeeb73","id":8,"originaltext":"如果希望不论拋出哪种类型的异常都能捕获，可以编写如下 catch 块：","page":2,"textblocks":[{"first":[36.503482818603516,714.3242797851562,12.005577087402344,15.5],"last":[398.921875,714.3242797851562,12.005584716796875,15.5],"length":35,"rects":[[36.503482818603516,714.3242797851562,374.42397689819336,15.5]],"start":486,"text":"如果希望不论拋出哪种类型的异常都能捕获，可以编写如下 catch 块："}],"type":5,"uuid":"d139b42483223ebf459915c80e8a3879"},{"date":"2023-04-26 19:39:41","docid":0,"fillcolor":"fffeeb73","id":9,"originaltext":"异常的再拋出","page":4,"textblocks":[{"first":[36.503482818603516,103.0424575805664,18.008365631103516,20.5],"last":[126.54531860351562,103.0424575805664,18.00836181640625,20.5],"length":6,"rects":[[36.503482818603516,103.0424575805664,108.05019760131836,20.5]],"start":69,"text":"异常的再拋出"}],"type":5,"uuid":"552a8b467bc029dcf565029017398c0c"},{"date":"2023-04-26 19:39:46","docid":0,"fillcolor":"fffeeb73","id":10,"originaltext":"如果一个函数在执行过程中拋出的异常在本函数内就被 catch 块捕获并处理，那么该异常就不会拋给这个函数的调用者（也称为“上一层的函数”）；如果异常在本函数中没有被处理，则它就会被拋给上一层的函数","page":4,"textblocks":[{"first":[36.503482818603516,141.0577850341797,12.005577087402344,15.5],"last":[120.54253387451172,179.32557678222656,12.005577087402344,15.5],"length":100,"rects":[[36.503482818603516,141.0577850341797,518.4909019470215,15.5],[36.503482818603516,160.56686401367188,516.239803314209,14.5],[36.503482818603516,179.32557678222656,96.04462814331055,15.5]],"start":76,"text":"如果一个函数在执行过程中拋出的异常在本函数内就被 catch 块捕获并处理，那么该异常就不会拋\n给这个函数的调用者（也称为“上一层的函数”）；如果异常在本函数中没有被处理，则它就会被\n拋给上一层的函数"}],"type":5,"uuid":"9e0595822547eab0df5c74562ee16c90"},{"date":"2023-04-26 19:40:24","docid":0,"fillcolor":"fffeeb73","id":11,"originaltext":"函数的异常声明列表","page":6,"textblocks":[{"first":[36.503482818603516,635.7902221679688,18.008365631103516,20.5],"last":[180.57041931152344,635.7902221679688,18.00836181640625,20.5],"length":9,"rects":[[36.503482818603516,635.7902221679688,162.07529830932617,20.5]],"start":161,"text":"函数的异常声明列表"}],"type":5,"uuid":"926093a93161d131ac35a10f0313f550"},{"date":"2023-04-26 19:40:29","docid":0,"fillcolor":"fffeeb73","id":12,"originaltext":"使程序员在使用一个函数时就能看出这个函数可能会拋出哪些异常，C++ 允许在函数声明和定义时，加上它所能拋出的异常的列表","page":6,"textblocks":[{"first":[228.5927276611328,674.555908203125,12.005584716796875,14.5],"last":[390.66802978515625,693.3146362304688,12.005584716796875,15.5],"length":60,"rects":[[228.5927276611328,674.555908203125,324.1505584716797,14.5],[36.503482818603516,693.3146362304688,366.1701316833496,15.5]],"start":187,"text":"使程序员在使用一个函数时就能看出这个函数可能会拋出哪些\n异常，C++ 允许在函数声明和定义时，加上它所能拋出的异常的列表"}],"type":5,"uuid":"008d57adee3e844e266e4b5bad36e354"},{"date":"2023-04-26 19:40:40","docid":0,"fillcolor":"fffeeb73","id":13,"originaltext":"函数如果拋出了其异常声明列表中没有的异常，在编译时不会引发错误，但在运行时， Dev C++编译出来的程序会出错；","page":7,"textblocks":[{"first":[36.503482818603516,269.3676452636719,12.005577087402344,15.5],"last":[156.55926513671875,288.9767150878906,12.005584716796875,15.5],"length":58,"rects":[[36.503482818603516,269.3676452636719,511.64171981811523,15.5],[36.503482818603516,288.9767150878906,132.0613670349121,15.5]],"start":229,"text":"函数如果拋出了其异常声明列表中没有的异常，在编译时不会引发错误，但在运行时， Dev C++\n编译出来的程序会出错；"}],"type":5,"uuid":"21dc5ec8fc51ed9bed3f5dcd6d56dd39"},{"date":"2023-04-26 19:40:43","docid":0,"fillcolor":"fffeeb73","id":14,"originaltext":"C++标准异常类","page":7,"textblocks":[{"first":[36.503482818603516,340.1528625488281,12.119632720947266,21.5],"last":[147.55508422851562,340.1528625488281,18.00836181640625,21.5],"length":8,"rects":[[36.503482818603516,340.1528625488281,129.05996322631836,21.5]],"start":336,"text":"C++标准异常类"}],"type":5,"uuid":"3817e083d392e9d350172ebef6ecff60"},{"date":"2023-04-26 19:40:50","docid":0,"fillcolor":"fffeeb73","id":15,"originaltext":"C++ 标准库中有一些类代表异常，这些类都是从 exception 类派生而来的。常用的几个异常类如图 1 所示。","page":7,"textblocks":[{"first":[36.503482818603516,378.1681823730469,8.031730651855469,15.5],"last":[86.77684020996094,397.67724609375,12.005577087402344,13.5],"length":58,"rects":[[36.503482818603516,378.1681823730469,513.2383995056152,15.5],[36.503482818603516,397.67724609375,62.278934478759766,13.5]],"start":345,"text":"C++ 标准库中有一些类代表异常，这些类都是从 exception 类派生而来的。常用的几个异常类如\n图 1 所示。"}],"type":5,"uuid":"faac37b3f719d49d27e6fa3fbb800576"},{"date":"2023-04-26 19:40:54","docid":0,"id":16,"imgfile":"93bf1798690299b1c671c954002b6591.png","linecolor":"ffa0ec6f","linewidth":2,"page":7,"rect":[122.92704800822099,409.1542431254022,488.0926906208775,614.635240041105],"type":2,"uuid":"bbca4113a46abba8bf2cae3d88c1a17f"},{"date":"2023-04-26 19:40:59","docid":0,"fillcolor":"fffeeb73","id":17,"originaltext":"1) bad_typeid","page":7,"textblocks":[{"first":[36.503482818603516,765.497802734375,6.481510162353516,14.5],"last":[100.28311920166016,765.497802734375,6.985748291015625,14.5],"length":13,"rects":[[36.503482818603516,765.497802734375,70.76538467407227,14.5]],"start":674,"text":"1) bad_typeid"}],"type":5,"uuid":"930b4adc805a13b78f73ad88ba193b30"},{"date":"2023-04-26 19:41:12","docid":0,"fillcolor":"fffeeb73","id":18,"originaltext":"使用 typeid 运算符时，如果其操作数是一个多态类的指针，而该指针的值为 NULL，则会拋出此异常。","page":8,"textblocks":[{"first":[36.503482818603516,30.75678253173828,12.005577087402344,14.5],"last":[48.509063720703125,50.265846252441406,12.005577087402344,15.5],"length":53,"rects":[[36.503482818603516,30.75678253173828,521.4923057556152,14.5],[36.503482818603516,50.265846252441406,24.011157989501953,15.5]],"start":0,"text":"使用 typeid 运算符时，如果其操作数是一个多态类的指针，而该指针的值为 NULL，则会拋出此异\n常。"}],"type":5,"uuid":"6302cdb286a9293332c8a3f3961413dd"},{"date":"2023-04-26 19:41:15","docid":0,"fillcolor":"fffeeb73","id":19,"originaltext":"2) bad_cast","page":8,"textblocks":[{"first":[36.503482818603516,73.67630767822266,6.481510162353516,14.5],"last":[90.5285873413086,73.67630767822266,4.349021911621094,14.5],"length":11,"rects":[[36.503482818603516,73.67630767822266,58.37412643432617,14.5]],"start":54,"text":"2) bad_cast"}],"type":5,"uuid":"a2ce2c3f0d9ee1cb0466e73517ac9fd7"},{"date":"2023-04-26 19:41:19","docid":0,"fillcolor":"fffeeb73","id":20,"originaltext":"在用 dynamic_cast 进行从多态基类对象（或引用）到派生类的引用的强制类型转换时，如果转换是不安全的，则会拋出此异常。","page":8,"textblocks":[{"first":[36.503482818603516,98.28816223144531,12.005577087402344,15.5],"last":[192.5760040283203,117.046875,12.005584716796875,15.5],"length":65,"rects":[[36.503482818603516,98.28816223144531,515.4894981384277,15.5],[36.503482818603516,117.046875,168.07810592651367,15.5]],"start":66,"text":"在用 dynamic_cast 进行从多态基类对象（或引用）到派生类的引用的强制类型转换时，如果转换\n是不安全的，则会拋出此异常。"}],"type":5,"uuid":"409777a7124cf10c89901b9fb5b56bda"}],"maxid":20,"notelinks":[],"title":"C++异常处理（try catch throw）完全攻略","unimportant":[]}